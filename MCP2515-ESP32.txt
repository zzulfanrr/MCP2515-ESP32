

#include "mcp2515.h"
#include <SPI.h>

MCP2515 MCP2515(5);
#define MCP2515_INT 21
#define INTERNAL_LED 2

// Define CAN ID (Extended)
#define LISTEN_ID 0x98DAF101
#define RES_ID 0x98DA01F1
#define REQ_ID 0x98DB33F1

uint32_t RX_ID;
unsigned char dlc;
unsigned char RX_Buff[8];
char messageString[128];

unsigned long prevTX = 0;
const unsigned int invlTX = 1000;  //Interval before timeout

void setup() {
  Serial.begin(115200);

  pinMode(INTERNAL_LED, OUTPUT);

  // Mode: STDEXT - Accept Std/Ext ID
  if (MCP2515.begin(MCP2515_STDEXT, CAN_500KBPS, MCP2515_8MHZ) == CAN_OK) {  //Baud Rate/CAN Speed = 500 KBPS, CLOCK MCP2515 = 8 MHZ
    Serial.println("Setup Success!");
  } else {
    Serial.println("Setup Failed");
  }
  delay(500);

  /*
  MCP2515.def_Mask(0, 1, 0x90FF0000);    // Init first mask
  MCP2515.def_Filter(0, 1, 0x90DA0000);  // Init first filter
  MCP2515.def_Filter(1, 1, 0x90DB0000);  // Init second filter

  MCP2515.def_Mask(1, 1, 0x90FF0000);    // Init second mask
  MCP2515.def_Filter(2, 1, 0x90DA0000);  // Init third filter
  MCP2515.def_Filter(3, 1, 0x90DB0000);  // Init fourth filter
  MCP2515.def_Filter(4, 1, 0x90DA0000);  // Init fifth filter
  MCP2515.def_Filter(5, 1, 0x90DB0000);  // Init sixth filter
  */
  if (MCP2515.setNormalMode() == MODE_NORMAL) {
    Serial.println("Set to Normal Mode successfully!");
  } else {
    Serial.println("Failed to set Normal Mode");
  }
  /*
  if (MCP2515.setLoopbackMode() == MODE_LOOPBACK) {
    Serial.println("Set to Loop Back Mode successfully!");
  } else {
    Serial.println("Failed to set Loop Back Mode");
  } */

  pinMode(MCP2515_INT, INPUT);
}

byte data[8] = { 0x01, 0x03, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA };

byte dataSets[][8] = {
  { 0x02, 0x01, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x01, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x02, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x03, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x04, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x05, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x06, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x07, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x08, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x09, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x0B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x0C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x0D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x0E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x0F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  
  { 0x02, 0x01, 0x10, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x11, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x12, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x13, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x14, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x15, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x16, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x17, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x18, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x19, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x1A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x1B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x1C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x1D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x1E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x1F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x21, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x22, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x23, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x24, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x25, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x26, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x27, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x28, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x29, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x2A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x2B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x2C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x2D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x2E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x2F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x30, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x31, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x32, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x33, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x34, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x35, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x36, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x37, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x38, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x39, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x3A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x3B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x3C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x3D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x3E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x3F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x40, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x41, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x42, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x43, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x44, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x45, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x46, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x47, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x48, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x49, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x4A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x4B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x4C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x4D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x4E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x4F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x50, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x51, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x52, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x53, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x54, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x55, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x56, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x57, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x58, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x59, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x5A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x5B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x5C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x5D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x5E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x5F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x60, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x61, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x62, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x63, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x64, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x65, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x66, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x67, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x68, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x69, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x6A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x6B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x6C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x6D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x6E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x6F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  
  { 0x02, 0x01, 0x70, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x71, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x72, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x73, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x74, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x75, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x76, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x77, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x78, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x79, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x7A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x7B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x7C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x7D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x7E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x7F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x80, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x81, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x82, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x83, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x84, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x85, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x86, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x87, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x88, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x89, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x8A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x8B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x8C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x8D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x8E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x8F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0x90, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x91, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x92, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x93, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x94, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x95, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x96, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x97, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x98, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x99, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x9A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x9B, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x9C, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x9D, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x9E, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0x9F, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

  { 0x02, 0x01, 0xA0, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA1, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA2, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA3, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA4, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA5, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA6, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA7, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA8, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
  { 0x02, 0x01, 0xA9, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA }
};
int currentDataSet = 0; 
//05 : Engine Coolant Temperature
// OC : RPM
// 14 : O2 Sensor
// 11 : Throttle Position
// 42 : Control Module Voltage

// Mode : 01 - Live Data
// Mode : 02 - Freeze Frame

// Expected Value : (HEX) 03 42 05 "50"
// (DEC) 40

void loop() {

  if (!digitalRead(MCP2515_INT)) {
    MCP2515.getMessage(&RX_ID, &dlc, RX_Buff);

    digitalWrite(INTERNAL_LED, HIGH);
    delay(500);
    digitalWrite(INTERNAL_LED, LOW);
    delay(500);

    sprintf(messageString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (RX_ID & 0x1FFFFFFF), dlc);
    Serial.print(messageString);
    for (byte i = 0; i < dlc; i++) {
      sprintf(messageString, " 0x%.2X", RX_Buff[i]);
      Serial.print(messageString);
    }
    Serial.println();
  }

  if ((millis() - prevTX) >= invlTX) {
    prevTX = millis();
    //byte sendStat = MCP2515.sendMessage(REQ_ID, 8, dataSets[currentDataSet]);
    byte sendStat = MCP2515.sendMessage(REQ_ID, 8, data);
    if (sendStat == CAN_OK) {
      Serial.println("Message Sent Successfully!");
    } else if (sendStat == CAN_TXTIMEOUT) {
      Serial.println("TX Timeout");
    } else if (sendStat == CAN_MSGTIMEOUT) {
      Serial.println("Message Timeout");
    } else {
      Serial.println("Error Sending Message");
    }

    //currentDataSet = (currentDataSet + 1) % (sizeof(dataSets) / sizeof(dataSets[0]));
  }
  /*
  if ((millis() - prevTX) >= invlTX) {
    prevTX = millis();
    byte sendStat = MCP2515.sendMessage(REQ_ID, 8, data);
    if (sendStat == CAN_OK) {
      Serial.println("Message Sent Successfully!");
    } else if (sendStat == CAN_TXTIMEOUT) {
      Serial.println("TX Timeout");
    } else if (sendStat == CAN_MSGTIMEOUT) {
      Serial.println("Message Timeout");
    } else {
      Serial.println("Error Sending Message");
    }
  } */
}

